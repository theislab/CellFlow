[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "cell_flow_perturbation"
version = "0.0.1"
description = "Modeling complex perturbations with flow matching and optimal transport"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
aauthors = [
    {name = "Dominik Klein"},
    {name = "Jonas Simon Fleck"},
    {name = "Alejandro Tejada"},
    {name = "Daniil Bobrovskiy"},
    {name = "Lea Zimmermann"},
]
maintainers = [
    {name = "Dominik Klein"},
    {name = "Jonas Simon Fleck"},
    {name = "Alejandro Tejada"},
    {name = "Daniil Bobrovskiy"},
    {name = "Lea Zimmermann"},
]
urls.Documentation = "https://cell_flow_perturbation.readthedocs.io/"
urls.Source = "https://github.com/theislab/cell_flow_perturbation"
urls.Home-page = "https://github.com/theislab/cell_flow_perturbation"
dependencies = [
    "anndata",
    "scanpy",
    "ott-jax>=0.4.7",
    "orbax",
    "flax",
    "cloudpickle",
    "diffrax",
    "session-info",
    "adjustText",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "twine>=4.0.2",
    "sphinx",
    "sphinxcontrib-bibtex",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "myst-nb",
    "sphinx_design",
    "sphinx_tippy",
    "furo",
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "sphinx-book-theme>=1.0.0",
    "myst-nb>=1.1.0",
    "sphinxcontrib-bibtex>=1.0.0",
    "setuptools",  # Until pybtex >0.23.0 releases: https://bitbucket.org/pybtex-devs/pybtex/issues/169/
    "sphinx-autodoc-typehints",
    "sphinxext-opengraph",
    # For notebooks
    "ipykernel",
    "ipython",
    "sphinx-copybutton",
    "pandas",
]
test = [
    "pytest",
    "coverage",
]
pp = [
    "pertpy",
    "rdkit",
    "pynndescent",
    "cuml",
]

[tool.hatch.build.targets.wheel]
packages = ['src/cfp']

[tool.coverage.run]
source = ["cfp"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]

[tool.ruff]
line-length = 120
src = ["src"]
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; formatter gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb",
]

[tool.rstcheck]
ignore_directives = [
    "toctree",
    "currentmodule",
    "autosummary",
    "module",
    "automodule",
    "autoclass",
    "bibliography",
    "glossary",
    "card",
    "grid",
]
ignore_roles = [
    "mod",
]


[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
python_version = "3.10"
plugins = "numpy.typing.mypy_plugin"

ignore_errors = false

warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_any_generics = true

strict_optional = true
strict_equality = true
warn_return_any = false
warn_unreachable = false
check_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
no_warn_no_return = true

show_error_codes = true
show_column_numbers = true
error_summary = true
ignore_missing_imports = true

disable_error_code = ["assignment", "comparison-overlap", "no-untyped-def", "override"]

[tool.doc8]
max_line_length = 120

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4.0
env_list = lint-code,py{3.8,3.9,3.10,3.11}
skip_missing_interpreters = true

[testenv]
extras = test
pass_env = PYTEST_*,CI
commands =
    python -m pytest {tty:--color=yes} {posargs: \
        --cov={env_site_packages_dir}{/}cell_flow_perturbation --cov-config={tox_root}{/}pyproject.toml \
        --no-cov-on-fail --cov-report=xml --cov-report=term-missing:skip-covered}

[testenv:lint-code]
description = Lint the code.
deps = pre-commit>=3.0.0
skip_install = true
commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:lint-docs]
description = Lint the documentation.
extras = docs
ignore_errors = true
allowlist_externals = make
pass_env = PYENCHANT_LIBRARY_PATH
set_env = SPHINXOPTS = -W -q --keep-going
changedir = {tox_root}{/}docs
commands =
    make linkcheck {posargs}
    # make spelling {posargs}

[testenv:examples-docs]
allowlist_externals = bash
description = Run the notebooks.
use_develop = true
deps =
    ipykernel
    jupytext
    nbconvert
    leidenalg
extras = docs
changedir = {tox_root}{/}docs
commands =
    python -m ipykernel install --user --name=cell_flow_perturbation
    bash {tox_root}/.run_notebooks.sh {tox_root}{/}docs/notebooks

[testenv:clean-docs]
description = Remove the documentation.
deps =
skip_install = true
changedir = {tox_root}{/}docs
allowlist_externals = make
commands =
    make clean

[testenv:build-docs]
description = Build the documentation.
deps =
extras = docs
allowlist_externals = make
changedir = {tox_root}{/}docs
commands =
    make html {posargs}
commands_post =
    python -c 'import pathlib; print("Documentation is under:", pathlib.Path("{tox_root}") / "docs" / "_build" / "html" / "index.html")'

[testenv:build-package]
description = Build the package.
deps =
    build
    twine
allowlist_externals = rm
commands =
    rm -rf {tox_root}{/}dist
    python -m build --sdist --wheel --outdir {tox_root}{/}dist{/} {posargs:}
    python -m twine check {tox_root}{/}dist{/}*
commands_post =
    python -c 'import pathlib; print(f"Package is under:", pathlib.Path("{tox_root}") / "dist")'

[testenv:format-references]
description = Format references.bib.
deps =
skip_install = true
allowlist_externals = biber
commands = biber --tool --output_file={tox_root}{/}docs{/}references.bib --nolog \
    --output_align --output_indent=2 --output_fieldcase=lower \
    --output_legacy_dates --output-field-replace=journaltitle:journal,thesis:phdthesis,institution:school \
    {tox_root}{/}docs{/}references.bib
"""
